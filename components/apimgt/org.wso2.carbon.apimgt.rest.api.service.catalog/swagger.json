{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Service Catalog APIs",
    "description" : "This specifies a **RESTful API** for Service Catalog.\n",
    "version" : "0.9"
  },
  "servers" : [ {
    "url" : "https://apis.wso2.com/api/service-catalog/v1"
  }, {
    "url" : "http://apis.wso2.com/api/service-catalog/v1"
  } ],
  "paths" : {
    "/services" : {
      "get" : {
        "summary" : "Retrieve/search services",
        "description" : "Retrieve or search services in the service catalog of the user's organization or tenant.\n",
        "operationId" : "searchServices",
        "security" : [ {
          "OAuth2Security" : [ "service_catalog:entry_view" ]
        } ],
        "tags" : [ "Services" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Filter services by the name of the service\n",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Filter services by version of the service\n",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "definitionType",
          "in" : "query",
          "description" : "Filter services by definitionType\n",
          "schema" : {
            "type" : "string",
            "enum" : [ "OAS", "WSDL1", "WSDL2", "GRAPHQL_SDL", "ASYNC_API" ]
          }
        }, {
          "name" : "displayName",
          "in" : "query",
          "description" : "Filter services by the display name\n",
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/servicesSortBy"
        }, {
          "$ref" : "#/components/parameters/sortOrder"
        }, {
          "$ref" : "#/components/parameters/limit"
        }, {
          "$ref" : "#/components/parameters/offset"
        } ],
        "responses" : {
          "200" : {
            "description" : "Paginated matched list of services returned.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request. Due to an invalid search parameter\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Create a new service",
        "description" : "Create a new service and add it to the service catalog of the user's organization (or tenant) \nby specifying the details of the service along with its definition. \n",
        "security" : [ {
          "OAuth2Security" : [ "service_catalog:entry_write" ]
        } ],
        "tags" : [ "Services" ],
        "operationId" : "createService",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateServiceRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created.\nSuccessful response with the newly created service entry as the response payload\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Service"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.\nInvalid request or validation error.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "415" : {
            "description" : "Unsupported Media Type.\nThe entity of the request was in a not supported format.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/services/{serviceId}" : {
      "get" : {
        "summary" : "Get details of a service",
        "description" : "Get details of a service using the id of the service.\n",
        "security" : [ {
          "OAuth2Security" : [ "service_catalog:entry_view" ]
        } ],
        "operationId" : "getServiceById",
        "tags" : [ "Services" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/serviceId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Requested service in the service catalog is returned.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Service"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found.\nRequested service does not exist in the service catalog.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Update a service",
        "description" : "Update a service's details and definition\n",
        "security" : [ {
          "OAuth2Security" : [ "service_catalog:entry_write" ]
        } ],
        "operationId" : "updateService",
        "tags" : [ "Services" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/serviceId"
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateServiceRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated.\nSuccessful response with the newly updated service as entity in the body.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Service"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found.\nRequested Service does not exist.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Delete a service",
        "description" : "Delete a service by providing the service id\n",
        "security" : [ {
          "OAuth2Security" : [ "service_catalog:entry_write" ]
        } ],
        "operationId" : "deleteService",
        "tags" : [ "Services" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/serviceId"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully deleted the catalog entry.\n"
          },
          "400" : {
            "description" : "Invalid Request\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found.\nRequested Service does not exist.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/services/{serviceId}/definition" : {
      "get" : {
        "summary" : "Retrieve a service definition",
        "description" : "Retrieve the definition of a service identified by the service id.\n",
        "security" : [ {
          "OAuth2Security" : [ "service_catalog:entry_view" ]
        } ],
        "operationId" : "getServiceDefinition",
        "tags" : [ "Services" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/serviceId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response with the definition file as entity in the body.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/yaml" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found.\nRequested Service does not exist.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/services/import" : {
      "post" : {
        "summary" : "Import a service",
        "description" : "Import  a service by providing an archived service\n",
        "security" : [ {
          "OAuth2Security" : [ "service_catalog:entry_create" ]
        } ],
        "operationId" : "importService",
        "tags" : [ "Services" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/serviceId"
        }, {
          "$ref" : "#/components/parameters/ifMatch"
        }, {
          "name" : "overwrite",
          "in" : "query",
          "description" : "Whether to overwrite if there is any existing service with the same name and version.\n",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response with the imported service metadata.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Service"
                }
              }
            },
            "headers" : {
              "ETag" : {
                "$ref" : "#/components/headers/ETag"
              }
            }
          },
          "400" : {
            "description" : "Invalid Request\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/services/export" : {
      "head" : {
        "summary" : "Check service existence",
        "description" : "Check service existence by name and version.\nUpon successful response, this will also return the current state of the service as ETag header.\n",
        "security" : [ {
          "OAuth2Security" : [ "service_catalog:entry_view" ]
        } ],
        "operationId" : "checkServiceExistence",
        "tags" : [ "Services" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Name of the service to export\n",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Version of the service to export\n",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response with the available service's current state as the ETag header.\n",
            "headers" : {
              "ETag" : {
                "$ref" : "#/components/headers/ETag"
              }
            }
          },
          "404" : {
            "description" : "Not Found.\nRequested Service does not exist.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Export a service",
        "description" : "Export a service as an archived zip file.\n",
        "security" : [ {
          "OAuth2Security" : [ "service_catalog:entry_view" ]
        } ],
        "operationId" : "exportService",
        "tags" : [ "Services" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Name of the service to export\n",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Version of the service to export\n",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response as the exported service as a zipped archive.\n",
            "content" : {
              "application/zip" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            },
            "headers" : {
              "ETag" : {
                "$ref" : "#/components/headers/ETag"
              }
            }
          },
          "404" : {
            "description" : "Not Found.\nRequested Service does not exist.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/settings" : {
      "get" : {
        "summary" : "Retrieve service catalog API settings",
        "description" : "Retrieve Service Catalog API settings\n",
        "operationId" : "getSettings",
        "tags" : [ "Settings" ],
        "responses" : {
          "200" : {
            "description" : "OK.\nSettings returned\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Settings"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found.\nRequested Settings does not exist.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "securitySchemes" : {
      "OAuth2Security" : {
        "type" : "oauth2",
        "flows" : {
          "implicit" : {
            "authorizationUrl" : "https://example.com/oauth/authorize",
            "scopes" : {
              "service_catalog:view" : "view service catalog",
              "service_catalog:write" : "update service catalog",
              "service_catalog:entry_view" : "view service catalog entry",
              "service_catalog:entry_write" : "write service catalog entry"
            }
          }
        }
      }
    },
    "schemas" : {
      "ServiceList" : {
        "type" : "object",
        "title" : "Paginated Service Catalog Entry Array",
        "properties" : {
          "limit" : {
            "type" : "integer"
          },
          "offset" : {
            "type" : "integer"
          },
          "total" : {
            "type" : "integer"
          },
          "list" : {
            "type" : "array",
            "title" : "Service Catalog Entry Array",
            "items" : {
              "$ref" : "#/components/schemas/Service"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/Pagination"
          }
        }
      },
      "Service" : {
        "type" : "object",
        "title" : "The Service Catalog Entry object",
        "required" : [ "entryName", "version", "serviceType" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "01234567-0123-0123-0123-012345678901",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "pattern" : "^[^\\*]+$",
            "example" : "Pizzashack-Endpoint"
          },
          "displayName" : {
            "type" : "string",
            "pattern" : "^[^\\*]+$",
            "example" : "Pizzashack-Endpoint"
          },
          "description" : {
            "type" : "string",
            "example" : "A Catalog Entry that exposes a REST endpoint"
          },
          "version" : {
            "type" : "string",
            "example" : "v1"
          },
          "serviceUrl" : {
            "type" : "string",
            "example" : "http://localhost/pizzashack"
          },
          "definitionType" : {
            "type" : "string",
            "description" : "The type of the provided API definition",
            "example" : "OAS3",
            "enum" : [ "OAS2", "OAS3", "WSDL1", "WSDL2", "GRAPHQL_SDL", "ASYNC_API" ]
          },
          "securityType" : {
            "type" : "string",
            "description" : "The security type of the endpoint",
            "example" : "BASIC",
            "enum" : [ "BASIC", "DIGEST", "OAUTH2", "NONE" ]
          },
          "mutualSSLEnabled" : {
            "type" : "boolean",
            "description" : "Whether Mutual SSL is enabled for the endpoint",
            "default" : false
          },
          "usage" : {
            "type" : "integer",
            "description" : "Number of usages of the service in APIs",
            "readOnly" : true,
            "example" : 1
          },
          "createdTime" : {
            "type" : "string",
            "readOnly" : true,
            "example" : "2020-02-20T13:57:16.229"
          },
          "lastUpdatedTime" : {
            "type" : "string",
            "readOnly" : true,
            "example" : "2020-02-20T13:57:16.229"
          },
          "etag" : {
            "type" : "string",
            "description" : "md5 value representing current state of the service and the definition",
            "readOnly" : true,
            "example" : "32c890312cfadc94a7c1153f65a4f100"
          }
        }
      },
      "CreateServiceRequest" : {
        "type" : "object",
        "title" : "The Service Catalog Entry Schema object",
        "required" : [ "catalogEntry", "definitionFile" ],
        "properties" : {
          "catalogEntry" : {
            "$ref" : "#/components/schemas/Service"
          },
          "definitionFile" : {
            "type" : "string",
            "format" : "binary"
          }
        }
      },
      "Settings" : {
        "title" : "SettingsDTO",
        "properties" : {
          "scopes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Error" : {
        "type" : "object",
        "title" : "Error object returned with 4XX HTTP Status",
        "required" : [ "code", "message" ],
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int64"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message."
          },
          "description" : {
            "type" : "string",
            "description" : "A detail description about the error message.\n"
          },
          "moreInfo" : {
            "type" : "string",
            "description" : "Preferably an url with more details about the error.\n"
          },
          "error" : {
            "type" : "array",
            "description" : "If there are more than one error list them out.\nFor example, list out validation errors by each field.\n",
            "items" : {
              "$ref" : "#/components/schemas/ErrorListItem"
            }
          }
        }
      },
      "ErrorListItem" : {
        "type" : "object",
        "title" : "Description of individual errors that may have occurred during a request.",
        "required" : [ "code", "message" ],
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string",
            "description" : "Description about individual errors occurred\n"
          },
          "description" : {
            "type" : "string",
            "description" : "A detail description about the error message.\n"
          }
        }
      },
      "Pagination" : {
        "title" : "Pagination",
        "properties" : {
          "offset" : {
            "type" : "integer",
            "example" : 0
          },
          "limit" : {
            "type" : "integer",
            "example" : 1
          },
          "total" : {
            "type" : "integer",
            "example" : 10
          },
          "next" : {
            "type" : "string",
            "description" : "Link to the next subset of resources qualified.\nEmpty if no more resources are to be returned.\n"
          },
          "previous" : {
            "type" : "string",
            "description" : "Link to the previous subset of resources qualified.\nEmpty if current subset is the first subset returned.\n"
          }
        }
      }
    },
    "parameters" : {
      "serviceId" : {
        "name" : "serviceId",
        "in" : "path",
        "description" : "uuid of the catalog entry",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "ifMatch" : {
        "name" : "If-Match",
        "in" : "header",
        "description" : "ETag of the service resource to update",
        "schema" : {
          "type" : "string"
        }
      },
      "limit" : {
        "name" : "limit",
        "in" : "query",
        "description" : "Maximum limit of items to return.\n",
        "schema" : {
          "type" : "integer",
          "default" : 25
        }
      },
      "offset" : {
        "name" : "offset",
        "in" : "query",
        "description" : "Starting point within the complete list of items qualified.\n",
        "schema" : {
          "type" : "integer",
          "default" : 0
        }
      },
      "servicesSortBy" : {
        "name" : "sortBy",
        "in" : "query",
        "schema" : {
          "type" : "string",
          "enum" : [ "name", "definitionType" ]
        }
      },
      "sortOrder" : {
        "name" : "sortOrder",
        "in" : "query",
        "schema" : {
          "type" : "string",
          "enum" : [ "asc", "desc" ]
        }
      }
    },
    "headers" : {
      "ETag" : {
        "schema" : {
          "type" : "string"
        },
        "description" : "A hash-like string value which represents the current state of a resource"
      }
    }
  }
}